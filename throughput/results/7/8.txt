BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'GERMANY' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'EUROPE'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'PROMO POLISHED COPPER'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2138972.64..2138974.47 rows=733 width=38) (actual time=32744.758..32744.758 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=747243 read=254223 dirtied=674 written=1
   ->  HashAggregate  (cost=2138924.93..2138937.76 rows=733 width=38) (actual time=32744.672..32744.673 rows=2 loops=1)
         Buffers: shared hit=747240 read=254223 dirtied=674 written=1
         ->  Nested Loop  (cost=496470.84..2138447.77 rows=23858 width=38) (actual time=24331.656..32680.892 rows=24360 loops=1)
               Buffers: shared hit=747240 read=254223 dirtied=674 written=1
               ->  Nested Loop  (cost=496470.84..2131643.47 rows=23858 width=16) (actual time=24331.589..32490.751 rows=24360 loops=1)
                     Buffers: shared hit=698520 read=254223 dirtied=674 written=1
                     ->  Hash Join  (cost=496470.84..2124695.94 rows=23858 width=16) (actual time=24331.545..32110.464 rows=24360 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Buffers: shared hit=625303 read=254223 dirtied=674 written=1
                           ->  Nested Loop  (cost=0.00..1626026.17 rows=392069 width=16) (actual time=1.244..6474.710 rows=399253 loops=1)
                                 Buffers: shared hit=256710 read=210152 dirtied=422
                                 ->  Index Only Scan using part_p_type_p_partkey_idx on part  (cost=0.00..45444.13 rows=13033 width=4) (actual time=1.152..234.266 rows=13296 loops=1)
                                       Index Cond: (p_type = 'PROMO POLISHED COPPER'::text)
                                       Heap Fetches: 13296
                                       Buffers: shared hit=3327 read=8153
                                 ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.00..120.97 rows=31 width=20) (actual time=0.048..0.455 rows=30 loops=13296)
                                       Index Cond: (l_partkey = part.p_partkey)
                                       Buffers: shared hit=253383 read=201999 dirtied=422
                           ->  Hash  (cost=485026.79..485026.79 rows=915524 width=8) (actual time=24328.441..24328.441 rows=913977 loops=1)
                                 Buckets: 131072  Batches: 1  Memory Usage: 35703kB
                                 Buffers: shared hit=368590 read=44071 dirtied=252 written=1
                                 ->  Hash Join  (cost=136013.14..485026.79 rows=915524 width=8) (actual time=5501.596..23058.089 rows=913977 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       Buffers: shared hit=368590 read=44071 dirtied=252 written=1
                                       ->  Bitmap Heap Scan on orders  (cost=96982.52..419674.85 rows=4577622 width=12) (actual time=3472.432..8362.708 rows=4561956 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             Buffers: shared hit=223242 read=43242 dirtied=252 written=1
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..95838.12 rows=4577622 width=0) (actual time=3331.740..3331.740 rows=4570988 loops=1)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Buffers: shared hit=2 read=12454
                                       ->  Hash  (cost=35280.62..35280.62 rows=300000 width=4) (actual time=2028.871..2028.871 rows=300963 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10581kB
                                             Buffers: shared hit=145348 read=829
                                             ->  Nested Loop  (cost=906.17..35280.62 rows=300000 width=4) (actual time=44.529..1825.608 rows=300963 loops=1)
                                                   Buffers: shared hit=145348 read=829
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.052..0.120 rows=5 loops=1)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         Buffers: shared hit=2
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.009..0.024 rows=25 loops=1)
                                                               Buffers: shared hit=1
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.025..0.025 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               Buffers: shared hit=1
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.022..0.023 rows=1 loops=1)
                                                                     Filter: (r_name = 'EUROPE'::bpchar)
                                                                     Rows Removed by Filter: 4
                                                                     Buffers: shared hit=1
                                                   ->  Bitmap Heap Scan on customer  (cost=905.09..6455.63 rows=60000 width=8) (actual time=40.138..343.356 rows=60193 loops=5)
                                                         Recheck Cond: (c_nationkey = n1.n_nationkey)
                                                         Buffers: shared hit=145346 read=829
                                                         ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.09 rows=60000 width=0) (actual time=29.351..29.351 rows=60193 loops=5)
                                                               Index Cond: (c_nationkey = n1.n_nationkey)
                                                               Buffers: shared hit=10 read=829
                     ->  Index Scan using pk_supplier on supplier  (cost=0.00..0.28 rows=1 width=8) (actual time=0.013..0.014 rows=1 loops=24360)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=73217
               ->  Index Scan using pk_nation on nation n2  (cost=0.00..0.27 rows=1 width=30) (actual time=0.005..0.005 rows=1 loops=24360)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
                     Buffers: shared hit=48720
 Total runtime: 32763.133 ms
(64 rows)

COMMIT;
COMMIT
