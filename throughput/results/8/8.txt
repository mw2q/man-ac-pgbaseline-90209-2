BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'UNITED STATES' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'PROMO PLATED TIN'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2197452.45..2197454.28 rows=733 width=38) (actual time=44047.471..44047.472 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=715343 read=290656 dirtied=625 written=1
   ->  HashAggregate  (cost=2197404.74..2197417.57 rows=733 width=38) (actual time=44047.384..44047.386 rows=2 loops=1)
         Buffers: shared hit=715340 read=290656 dirtied=625 written=1
         ->  Nested Loop  (cost=496876.58..2196907.52 rows=24861 width=38) (actual time=30529.032..43963.812 rows=24256 loops=1)
               Buffers: shared hit=715340 read=290656 dirtied=625 written=1
               ->  Nested Loop  (cost=496876.58..2189817.16 rows=24861 width=16) (actual time=30528.943..43539.182 rows=24256 loops=1)
                     Buffers: shared hit=666828 read=290656 dirtied=625 written=1
                     ->  Hash Join  (cost=496876.58..2182577.57 rows=24861 width=16) (actual time=30528.890..42881.449 rows=24256 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           Buffers: shared hit=593896 read=290656 dirtied=625 written=1
                           ->  Nested Loop  (cost=0.00..1683409.70 rows=408537 width=16) (actual time=0.545..10881.824 rows=403330 loops=1)
                                 Buffers: shared hit=260094 read=211779 dirtied=373
                                 ->  Index Only Scan using part_p_type_p_partkey_idx on part  (cost=0.00..47041.45 rows=13567 width=4) (actual time=0.441..293.001 rows=13449 loops=1)
                                       Index Cond: (p_type = 'PROMO PLATED TIN'::text)
                                       Heap Fetches: 13449
                                       Buffers: shared hit=4869 read=6692
                                 ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.00..120.30 rows=31 width=20) (actual time=0.082..0.770 rows=30 loops=13449)
                                       Index Cond: (l_partkey = part.p_partkey)
                                       Buffers: shared hit=255225 read=205087 dirtied=373
                           ->  Hash  (cost=485421.13..485421.13 rows=916436 width=8) (actual time=30525.311..30525.311 rows=911184 loops=1)
                                 Buckets: 131072  Batches: 1  Memory Usage: 35594kB
                                 Buffers: shared hit=333799 read=78877 dirtied=252 written=1
                                 ->  Hash Join  (cost=136059.87..485421.13 rows=916436 width=8) (actual time=5534.915..29732.982 rows=911184 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       Buffers: shared hit=333799 read=78877 dirtied=252 written=1
                                       ->  Bitmap Heap Scan on orders  (cost=97029.25..420042.97 rows=4582181 width=12) (actual time=3678.163..12658.153 rows=4561773 loops=1)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             Buffers: shared hit=190679 read=76059 dirtied=252 written=1
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..95883.71 rows=4582181 width=0) (actual time=3520.826..3520.826 rows=4575464 loops=1)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                   Buffers: shared hit=2 read=12455
                                       ->  Hash  (cost=35280.62..35280.62 rows=300000 width=4) (actual time=1856.087..1856.087 rows=299436 loops=1)
                                             Buckets: 32768  Batches: 1  Memory Usage: 10528kB
                                             Buffers: shared hit=143120 read=2818
                                             ->  Nested Loop  (cost=906.17..35280.62 rows=300000 width=4) (actual time=36.605..1641.832 rows=299436 loops=1)
                                                   Buffers: shared hit=143120 read=2818
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.069..0.135 rows=5 loops=1)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         Buffers: shared hit=2
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.026..0.042 rows=25 loops=1)
                                                               Buffers: shared hit=1
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.025..0.025 rows=1 loops=1)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                               Buffers: shared hit=1
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.022..0.023 rows=1 loops=1)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                                                                     Rows Removed by Filter: 4
                                                                     Buffers: shared hit=1
                                                   ->  Bitmap Heap Scan on customer  (cost=905.09..6455.63 rows=60000 width=8) (actual time=36.106..306.946 rows=59887 loops=5)
                                                         Recheck Cond: (c_nationkey = n1.n_nationkey)
                                                         Buffers: shared hit=143118 read=2818
                                                         ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.09 rows=60000 width=0) (actual time=25.127..25.127 rows=59887 loops=5)
                                                               Index Cond: (c_nationkey = n1.n_nationkey)
                                                               Buffers: shared hit=13 read=821
                     ->  Index Scan using pk_supplier on supplier  (cost=0.00..0.28 rows=1 width=8) (actual time=0.024..0.025 rows=1 loops=24256)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=72932
               ->  Index Scan using pk_nation on nation n2  (cost=0.00..0.27 rows=1 width=30) (actual time=0.013..0.014 rows=1 loops=24256)
                     Index Cond: (n_nationkey = supplier.s_nationkey)
                     Buffers: shared hit=48512
 Total runtime: 44076.367 ms
(64 rows)

COMMIT;
COMMIT
